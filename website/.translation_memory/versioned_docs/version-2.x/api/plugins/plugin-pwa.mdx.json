{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-2.x/api/plugins/plugin-pwa.mdx",
  "source_file_content_hash": "a2dbecbd7a72f6ddb2401b08ae3700157fcda809552b2e56acef42f869d42465",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nsidebar_position: 9\nslug: /api/plugins/@docusaurus/plugin-pwa\n---",
      "source_content_hash": "b68561872192853069e5389a3218de06370088f9e04db9ead05c615d8e7d14d5",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "b3de8742",
      "source_content": "# 📦 plugin-pwa",
      "source_content_hash": "8637a03722a82c2448bda4c7b5dbc3180613eb71a610f8a5d1970c88d5c43002",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "# 📦 plugin-pwa"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Docusaurus Plugin to add PWA support using [Workbox](https://developers.google.com/web/tools/workbox). This plugin generates a [Service Worker](https://developers.google.com/web/fundamentals/primers/service-workers) in production build only, and allows you to create fully PWA-compliant documentation site with offline and installation support.",
      "source_content_hash": "3d707a955be470b307a911289897c54f457f03c424286913f364cb06e1b0df1b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Docusaurus 插件，通过 [Workbox](https://developers.google.com/web/tools/workbox) 添加 PWA 支持。该插件仅在生产构建时生成 [Service Worker](https://developers.google.com/web/fundamentals/primers/service-workers)，使您的文档站点具备完整的 PWA 功能，包括离线访问和安装支持。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Installation {#installation}",
      "source_content_hash": "01f99c1a4a9fd44bafc075a19f10269cf4e31a46b9c20b1a4b4cb278a46d10d5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 安装 {#installation}"
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```bash npm2yarn\nnpm install --save @docusaurus/plugin-pwa\n```",
      "source_content_hash": "631f2214510b740d39d842daa8029240f1a7c9efd2bbfc712ecfe89b7a10972a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "cbe57f9d",
      "source_content": "## Configuration {#configuration}",
      "source_content_hash": "8d40fda5898137d101c15929fa40cb58d8c71e60e8b40b33ce74200512d9f011",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 配置 {#configuration}"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "Create a [PWA manifest](https://web.dev/add-manifest/) at `./static/manifest.json`.",
      "source_content_hash": "5ee93154defcd71f45457a269ef1fa66977947b3bd83010f39a4ebb635bfad83",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在 `./static/manifest.json` 创建 [PWA 清单文件](https://web.dev/add-manifest/)。"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "Modify `docusaurus.config.js` with a minimal PWA config, like:",
      "source_content_hash": "f8e7e48f3e081b7553ec66beee83c6f00c8b234ab2010d9df0268c338ab00057",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "修改 `docusaurus.config.js` 添加最小化 PWA 配置，例如："
      }
    },
    {
      "segment_id": "9eee5787",
      "source_content": "```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-pwa',\n      {\n        debug: true,\n        offlineModeActivationStrategies: [\n          'appInstalled',\n          'standalone',\n          'queryString',\n        ],\n        pwaHead: [\n          {\n            tagName: 'link',\n            rel: 'icon',\n            href: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'link',\n            rel: 'manifest',\n            href: '/manifest.json', // your PWA manifest\n          },\n          {\n            tagName: 'meta',\n            name: 'theme-color',\n            content: 'rgb(37, 194, 160)',\n          },\n        ],\n      },\n    ],\n  ],\n};\n```",
      "source_content_hash": "60cad15997299549071bc4e87dcea865fdac5f428e72459f86b0041051dab5e9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_9eee5787"
      }
    },
    {
      "segment_id": "e50bebbf",
      "source_content": "## Progressive Web App {#progressive-web-app}",
      "source_content_hash": "3a0108ffde49a98a0033b1e0eafe6b19c3d3f443acea960823ae86aee0e4c674",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 渐进式 Web 应用 {#progressive-web-app}"
      }
    },
    {
      "segment_id": "23dfb152",
      "source_content": "Having a service worker installed is not enough to make your application a PWA. You'll need to at least include a [Web App Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest) and have the correct tags in `<head>` ([Options > pwaHead](#pwahead)).",
      "source_content_hash": "36ba9de5d6c8c3249d2363a671dec64d8afc00e0e6c3ef77b8bb4636ecadf7c9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "仅部署 Service Worker 不足以使您的应用成为 PWA。您至少需要包含 [Web 应用清单](https://developer.mozilla.org/zh-CN/docs/Web/Manifest) 并在 `<head>` 中添加正确的标签（参见 [选项 > pwaHead](#pwahead)）。"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "After deployment, you can use [Lighthouse](https://developers.google.com/web/tools/lighthouse) to run an audit on your site.",
      "source_content_hash": "4a47d47a2b2be97f1721be18b0988132dbfb7c60ba54d47fef312296d5a631d9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "部署后，您可以使用 [Lighthouse](https://developers.google.com/web/tools/lighthouse) 对站点进行审计。"
      }
    },
    {
      "segment_id": "8b2a52b1",
      "source_content": "For a more exhaustive list of what it takes for your site to be a PWA, refer to the [PWA Checklist](https://developers.google.com/web/progressive-web-apps/checklist)",
      "source_content_hash": "eed48666c9c6d3bbd7fcb8d579a949bbcfc9d43f3d241f073b3e0b52c95d750f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更完整的 PWA 实现要求，请参阅 [PWA 检查清单](https://developers.google.com/web/progressive-web-apps/checklist)"
      }
    },
    {
      "segment_id": "126950d7",
      "source_content": "## App installation support {#app-installation-support}",
      "source_content_hash": "5f8c379eba02d914005e209717974e09a0d09f8700a2159e6c7a8242fe9892e4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 应用安装支持 {#app-installation-support}"
      }
    },
    {
      "segment_id": "0bb95128",
      "source_content": "If your browser supports it, you should be able to install a Docusaurus site as an app.",
      "source_content_hash": "9dbdc2281b71a3fe030ecd374cc5fc3a71f5ca3e3ccff3e6a179b2f7f8a58f28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如果浏览器支持，您可以将 Docusaurus 站点作为应用安装。"
      }
    },
    {
      "segment_id": "657c2b20",
      "source_content": "![A screen recording of the installation process. A button appears in the address bar of the browser, which displays a dialog asking \"install this application?\" when clicked. After clicking the \"Install\" button, a new application is opened in the operating system, opening to the Docusaurus homepage.](/img/pwa_install.gif)",
      "source_content_hash": "9d8c3a4d45eb02148b0dae4b7d6f4b904b733200f4c00dbcd8bbf6e44093ec90",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![应用安装流程的屏幕录制。浏览器地址栏出现安装按钮，点击后显示\"安装此应用？\"的对话框。点击\"安装\"按钮后，操作系统将打开一个新应用窗口并加载 Docusaurus 首页。](/img/pwa_install.gif)"
      }
    },
    {
      "segment_id": "724adee0",
      "source_content": ":::note\n\nApp installation requires the HTTPS protocol and a valid manifest.\n\n:::",
      "source_content_hash": "fc56c347b195c805fd4427a6581f226ea4727004bd21dfdbebcaaf7a6b81e0c3",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n\n应用安装需要 HTTPS 协议和有效的清单文件。\n\n:::"
      }
    },
    {
      "segment_id": "93028a4e",
      "source_content": "## Offline mode (precaching) {#offline-mode-precaching}",
      "source_content_hash": "c0f39bf9ff5a4f380cb9714b019b356b41245e097d6ced85b9264cc6135d9031",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 离线模式（预缓存） {#offline-mode-precaching}"
      }
    },
    {
      "segment_id": "e8e162a9",
      "source_content": "We enable users to browse a Docusaurus site offline, by using service-worker precaching.",
      "source_content_hash": "aa28071c35b4d85b984114d1fe9bb806266f9891443787e07beff9b6b7db1509",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "通过 Service Worker 预缓存技术，用户可离线浏览 Docusaurus 站点。"
      }
    },
    {
      "segment_id": "463ed165",
      "source_content": "The [workbox-precaching](https://developers.google.com/web/tools/workbox/modules/workbox-precaching) page explains the idea:",
      "source_content_hash": "deb7bc176cb33baffdeb7fdec80c6545eb6e652b8e36b41c7e313bdf1e5eb4e5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "[workbox-precaching](https://developers.google.com/web/tools/workbox/modules/workbox-precaching) 页面阐述了其原理："
      }
    },
    {
      "segment_id": "c1945d24",
      "source_content": "> One feature of service workers is the ability to save a set of files to the cache when the service worker is installing. This is often referred to as \"precaching\", since you are caching content ahead of the service worker being used.\n>\n> The main reason for doing this is that it gives developers control over the cache, meaning they can determine when and how long a file is cached as well as serve it to the browser without going to the network, meaning it can be used to create web apps that work offline.\n>\n> Workbox takes a lot of the heavy lifting out of precaching by simplifying the API and ensuring assets are downloaded efficiently.",
      "source_content_hash": "9b7c83802a6e42d4f33910efd22c2814cd9e01f9543b326d14645bcee56bcb2c",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-CN": "> Service Worker 的核心特性之一是在安装阶段将文件集合保存至缓存，此过程通常称为\"预缓存\"。开发者由此获得缓存控制权，可决定文件缓存时机、持续时间，并能直接向浏览器提供缓存内容（无需网络请求），从而实现离线化 Web 应用。\n>\n> Workbox 通过简化的 API 和高效的资源下载机制，大幅降低了预缓存实现复杂度。"
      }
    },
    {
      "segment_id": "74dd7937",
      "source_content": "By default, offline mode is enabled when the site is installed as an app. See the `offlineModeActivationStrategies` option for details.",
      "source_content_hash": "7a63a2f09007b96e4f74f3de1cd3d629f94c67be51e3fd2ca490ab3bd98c11b1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "默认情况下，当站点作为应用安装时会启用离线模式。详见 `offlineModeActivationStrategies` 选项说明。"
      }
    },
    {
      "segment_id": "5803caac",
      "source_content": "After the site has been precached, the service worker will serve cached responses for later visits. When a new build is deployed along with a new service worker, the new one will begin installing and eventually move to a waiting state. During this waiting state, a reload popup will show and ask the user to reload the page for new content. Until the user either clears the application cache or clicks the `reload` button on the popup, the service worker will continue serving the old content.",
      "source_content_hash": "6d0dfd2f8d10521bef36179a0b437aa23c13f6c96b388af25346e1f4fa47e26c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "站点预缓存后，Service Worker 将为后续访问提供缓存响应。当新构建版本部署时，新版 Service Worker 开始安装并进入等待状态，此时将显示刷新弹窗提示用户更新内容。在用户清除应用缓存或点击弹窗的`刷新`按钮前，Service Worker 会持续提供旧版内容。"
      }
    },
    {
      "segment_id": "e2e299c8",
      "source_content": ":::warning\n\nOffline mode / precaching requires downloading all the static assets of the site ahead of time, and can consume unnecessary bandwidth. It may not be a good idea to activate it for all kind of sites.\n\n:::",
      "source_content_hash": "3dea952816bda50b8a1a47d291890c371d7746e7414fadab3e53bbe92107cb7f",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::warning\n\n离线模式/预缓存需要提前下载所有静态资源，可能消耗不必要的带宽。并非所有类型的站点都适合启用此功能。\n\n:::"
      }
    },
    {
      "segment_id": "e06c002e",
      "source_content": "## Options {#options}",
      "source_content_hash": "1ecc0321257b16f9836b45fb74a8be8a2f98cdd77589c4f08f998ef62beb8652",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 选项 {#options}"
      }
    },
    {
      "segment_id": "99d0dd9b",
      "source_content": "### `debug` {#debug}",
      "source_content_hash": "738facaa4a7179c80ebc34cece4aec4d3a16070642c7c667164de4a38544b3db",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### `debug` {#debug}"
      }
    },
    {
      "segment_id": "584b7213",
      "source_content": "- Type: `boolean`\n- Default: `false`",
      "source_content_hash": "79ae4b6f266c1cb5218d55ef2e5a0ad96446e7548ace643ad20b8fee4aa1cc5e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 类型: `boolean`\n- 默认值: `false`"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "Turn debug mode on:",
      "source_content_hash": "cf47e1f4b438f7668456dc8bc5c6fd2989fd8dd78136b4a758e46c19750889d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "启用调试模式："
      }
    },
    {
      "segment_id": "7a3b7c62",
      "source_content": "- Workbox logs\n- Additional Docusaurus logs\n- Unoptimized SW file output\n- Source maps",
      "source_content_hash": "03b6434aebb9b1bc1e65e31586974717bebf13c46a139a6342949a47b166f83e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- Workbox日志\n- 额外的Docusaurus日志\n- 未经优化的SW文件输出\n- 源代码映射"
      }
    },
    {
      "segment_id": "8574d51c",
      "source_content": "### `offlineModeActivationStrategies` {#offlinemodeactivationstrategies}",
      "source_content_hash": "2cbd61123ed94be76b13661776b3e5c802970f1a9230e25769d4a8b0c303d5b6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### `offlineModeActivationStrategies` {#offlinemodeactivationstrategies}"
      }
    },
    {
      "segment_id": "0422e2e2",
      "source_content": "- Type: `('appInstalled' | 'mobile' | 'saveData'| 'queryString' | 'always')[]`\n- Default: `['appInstalled', 'queryString', 'standalone']`",
      "source_content_hash": "925cce494b4d37e26bc83db6bec4752a46f77cddc13b4ff4805e023f342fa03a",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 类型: `('appInstalled' | 'mobile' | 'saveData'| 'queryString' | 'always')[]`\n- 默认值: `['appInstalled', 'queryString', 'standalone']`"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "Strategies used to turn the offline mode on:",
      "source_content_hash": "af0b068b3519cd76474157f836bb8cebbf67eccd4393631b3871417587939b35",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "激活离线模式的策略："
      }
    },
    {
      "segment_id": "2a1e835c",
      "source_content": "- `appInstalled`: activates for users having installed the site as an app (not 100% reliable)\n- `standalone`: activates for users running the app as standalone (often the case once a PWA is installed)\n- `queryString`: activates if queryString contains `offlineMode=true` (convenient for PWA debugging)\n- `mobile`: activates for mobile users (`width <= 996px`)\n- `saveData`: activates for users with `navigator.connection.saveData === true`\n- `always`: activates for all users",
      "source_content_hash": "d93a63b150029d6e6b73653578f595fdfb8b44850c20aeb16305478df08383f2",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `appInstalled`: 为已安装站点应用的用户激活（并非100%可靠）\n- `standalone`: 为以独立应用模式运行的用户激活（通常是PWA安装后的状态）\n- `queryString`: 当查询字符串包含`offlineMode=true`时激活（便于PWA调试）\n- `mobile`: 为移动端用户激活（`width <= 996px`）\n- `saveData`: 为`navigator.connection.saveData === true`的用户激活\n- `always`: 为所有用户激活"
      }
    },
    {
      "segment_id": "9913b39e",
      "source_content": ":::warning\n\nUse this carefully: some users may not like to be forced to use the offline mode.\n\n:::",
      "source_content_hash": "0c82677fd4af945f2463b9e30f9de0fa1ff1422198cc499624f1c1da04a264b3",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::warning\n\n谨慎使用：部分用户可能不喜欢被强制使用离线模式。\n\n:::"
      }
    },
    {
      "segment_id": "ed87fcae",
      "source_content": ":::danger\n\nIt is not possible to detect if an as a PWA in a very reliable way.\n\nThe `appinstalled` event has been [removed from the specification](https://github.com/w3c/manifest/pull/836), and the [`navigator.getInstalledRelatedApps()`](https://web.dev/get-installed-related-apps/) API is only supported in recent Chrome versions and require `related_applications` declared in the manifest.\n\nThe [`standalone` strategy](https://petelepage.com/blog/2019/07/is-my-pwa-installed/) is a nice fallback to activate the offline mode (at least when running the installed app).\n\n:::",
      "source_content_hash": "06018ca936022423102a8b7daf52530559ed59e5abd55f5ead359cb7f1ac7722",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::danger\n\n目前无法以非常可靠的方式检测应用是否作为PWA安装。\n\n`appinstalled`事件已[从规范中移除](https://github.com/w3c/manifest/pull/836)，且[`navigator.getInstalledRelatedApps()`](https://web.dev/get-installed-related-apps/)API仅在最新版Chrome中受支持，并要求在manifest中声明`related_applications`。\n\n[`standalone`策略](https://petelepage.com/blog/2019/07/is-my-pwa-installed/)是激活离线模式的良好备选方案（至少在运行已安装应用时有效）。\n\n:::"
      }
    },
    {
      "segment_id": "734d40d8",
      "source_content": "### `injectManifestConfig` {#injectmanifestconfig}",
      "source_content_hash": "7cd271a3eef5f39e33eb2ae37cf887a5e96c617035ac62bc2c8d2da533420320",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### `injectManifestConfig` {#injectmanifestconfig}"
      }
    },
    {
      "segment_id": "9e90a9b3",
      "source_content": "[Workbox options](https://developer.chrome.com/docs/workbox/reference/workbox-build/#type-InjectManifestOptions) to pass to `workbox.injectManifest()`. This gives you control over which assets will be precached, and be available offline.",
      "source_content_hash": "78a2212cfcd6474522e89a1d5d883df67c4d4eba890310d338cc295538a654e6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "传递给`workbox.injectManifest()`的[Workbox配置项](https://developer.chrome.com/docs/workbox/reference/workbox-build/#type-InjectManifestOptions)。通过此参数可控制哪些资源将被预缓存并支持离线访问。"
      }
    },
    {
      "segment_id": "d3939446",
      "source_content": "- Type: `InjectManifestOptions`\n- Default: `{}`",
      "source_content_hash": "3ffec4d3df20474d62b3aed81b54dd95e4b147b79c69d37c156297a50aadf4a5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 类型: `InjectManifestOptions`\n- 默认值: `{}`"
      }
    },
    {
      "segment_id": "ad3cd2f7",
      "source_content": "```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-pwa',\n      {\n        injectManifestConfig: {\n          manifestTransforms: [\n            //...\n          ],\n          modifyURLPrefix: {\n            //...\n          },\n          // We already add regular static assets (HTML, images...) to be available offline\n          // You can add more files according to your needs\n          globPatterns: ['**/*.{pdf,docx,xlsx}'],\n          // ...\n        },\n      },\n    ],\n  ],\n};\n```",
      "source_content_hash": "9a6da4bec283a0cdf48d8c5cd87cf3650e1127bab69620c8c59a74d65eee0b9c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ad3cd2f7"
      }
    },
    {
      "segment_id": "191265da",
      "source_content": "### `pwaHead` {#pwahead}",
      "source_content_hash": "117a2c4e4eeadb2b793ff6c10ccc03f6c3d07f3a76594ed6b64cbf795de153f7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### `pwaHead` {#pwahead}"
      }
    },
    {
      "segment_id": "d9211093",
      "source_content": "- Type: `({ tagName: string; [attributeName: string]: string })[]`\n- Default: `[]`",
      "source_content_hash": "d082fabba044370806de9735fbab0c7c3bd47adeb4cfb46026da74bc4a1a7595",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 类型: `({ tagName: string; [attributeName: string]: string })[]`\n- 默认值: `[]`"
      }
    },
    {
      "segment_id": "61a78cbe",
      "source_content": "Array of objects containing `tagName` and key-value pairs for attributes to inject into the `<head>` tag. Technically you can inject any head tag through this, but it's ideally used for tags to make your site PWA compliant. Here's a list of tag to make your app fully compliant:",
      "source_content_hash": "b07be669fe5bf1b25cc741345e87a47528da547481b0e9266f50c6944008d12a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "包含`tagName`和键值对属性的对象数组，用于注入到`<head>`标签。技术上可通过此方式注入任何head标签，但理想情况下应用于使站点符合PWA规范的标签。以下是使应用完全合规的推荐标签列表："
      }
    },
    {
      "segment_id": "904df6eb",
      "source_content": "```js\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-pwa',\n      {\n        pwaHead: [\n          {\n            tagName: 'link',\n            rel: 'icon',\n            href: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'link',\n            rel: 'manifest',\n            href: '/manifest.json',\n          },\n          {\n            tagName: 'meta',\n            name: 'theme-color',\n            content: 'rgb(37, 194, 160)',\n          },\n          {\n            tagName: 'meta',\n            name: 'apple-mobile-web-app-capable',\n            content: 'yes',\n          },\n          {\n            tagName: 'meta',\n            name: 'apple-mobile-web-app-status-bar-style',\n            content: '#000',\n          },\n          {\n            tagName: 'link',\n            rel: 'apple-touch-icon',\n            href: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'link',\n            rel: 'mask-icon',\n            href: '/img/docusaurus.svg',\n            color: 'rgb(37, 194, 160)',\n          },\n          {\n            tagName: 'meta',\n            name: 'msapplication-TileImage',\n            content: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'meta',\n            name: 'msapplication-TileColor',\n            content: '#000',\n          },\n        ],\n      },\n    ],\n  ],\n};\n```",
      "source_content_hash": "08a0546697bef262f80f89c985a374dee5a09cd4aee04703acb778f4d60406cd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_904df6eb"
      }
    },
    {
      "segment_id": "c9f45ca3",
      "source_content": "### `swCustom` {#swcustom}",
      "source_content_hash": "cf86ce330bb4411d61efccfda7cbdb76453f292c8cb9c20fc186bb6598b8e1c4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### `swCustom` {#swcustom}"
      }
    },
    {
      "segment_id": "8aacd6aa",
      "source_content": "- Type: `string | undefined`\n- Default: `undefined`",
      "source_content_hash": "c71b2c4c1a514d69558a6302d1ba4b9eb6dfe4fcb2285b9ac717f28105caedb6",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 类型: `string | undefined`\n- 默认值: `undefined`"
      }
    },
    {
      "segment_id": "80dbdeb8",
      "source_content": "Useful for additional Workbox rules. You can do whatever a service worker can do here, and use the full power of workbox libraries. The code is transpiled, so you can use modern ES6+ syntax here.",
      "source_content_hash": "3916daa45b34d46c4d4d66719fd88501930cb8a17f68e23bd110560d7177d1ee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "用于添加自定义Workbox规则。此处可实现服务工作者支持的所有功能，并充分利用workbox库的能力。代码会被转译，因此可使用现代ES6+语法。"
      }
    },
    {
      "segment_id": "d3f13bf4",
      "source_content": "For example, to cache files from external routes:",
      "source_content_hash": "342a53f574cbfe1b430f5ed86c13511c14e9041dcac68d0483c54390b4046233",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "例如缓存外部路由文件："
      }
    },
    {
      "segment_id": "9eaa3064",
      "source_content": "```js\nimport {registerRoute} from 'workbox-routing';\nimport {StaleWhileRevalidate} from 'workbox-strategies';\n\n// default fn export receiving some useful params\nexport default function swCustom(params) {\n  const {\n    debug, // :boolean\n    offlineMode, // :boolean\n  } = params;\n\n  // Cache responses from external resources\n  registerRoute((context) => {\n    return [\n      /graph\\.facebook\\.com\\/.*\\/picture/,\n      /netlify\\.com\\/img/,\n      /avatars1\\.githubusercontent/,\n    ].some((regex) => context.url.href.match(regex));\n  }, new StaleWhileRevalidate());\n}\n```",
      "source_content_hash": "e8f843a06a72d7e61487cdec6b8a8b9453b1e929c70f4497ab2cda90aa85869e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_9eaa3064"
      }
    },
    {
      "segment_id": "6085c028",
      "source_content": "The module should have a `default` function export, and receives some params.",
      "source_content_hash": "8b265678c12eefc83faff109458a8ae0c15f8114c0ae88fa72775b8ffdd5c2b1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "该模块应导出`default`函数，并接收若干参数。"
      }
    },
    {
      "segment_id": "16efe6ee",
      "source_content": "### `swRegister` {#swregister}",
      "source_content_hash": "3de76dc8523bded6014b6924671e78f86c808d449ea65de7fec7ff2de3d3d203",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### `swRegister` {#swregister}"
      }
    },
    {
      "segment_id": "ab7b2d04",
      "source_content": "- Type: `string | false`\n- Default: `'docusaurus-plugin-pwa/src/registerSW.js'`",
      "source_content_hash": "9de8bcb77b4b49985b77e9cfe7ad9fcff99ca4d7d8c8ddbb62d3c97d9d20430e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 类型: `string | false`\n- 默认值: `'docusaurus-plugin-pwa/src/registerSW.js'`"
      }
    },
    {
      "segment_id": "53e725dc",
      "source_content": "Adds an entry before the Docusaurus app so that registration can happen before the app runs. The default `registerSW.js` file is enough for simple registration.",
      "source_content_hash": "945d339e00428006cf14afb69fae5a4eb5266a926a2317fbb4d1fcd635e29111",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在Docusaurus应用前添加注册入口，确保注册流程在应用运行前完成。默认的`registerSW.js`文件已满足基本注册需求。"
      }
    },
    {
      "segment_id": "5014d30c",
      "source_content": "Passing `false` will disable registration entirely.",
      "source_content_hash": "5f2fe4ab0d24883d79b6459f062a2069230baae283c2e91ad7989ffeeaf6ca54",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "传入`false`将完全禁用注册功能。"
      }
    },
    {
      "segment_id": "4b62af77",
      "source_content": "## Manifest example {#manifest-example}",
      "source_content_hash": "7ca6d33d58a819dfd98654bfa133c318c79c7cf47419bd48da9fe9eebe6b4619",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## Manifest示例 {#manifest-example}"
      }
    },
    {
      "segment_id": "740d2e67",
      "source_content": "The Docusaurus site manifest can serve as an inspiration:",
      "source_content_hash": "afee1542eaa95126dda84a66ecc5c31e3dca562224229ac58d7a078614ced162",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Docusaurus 站点清单可作为参考："
      }
    },
    {
      "segment_id": "97fcba86",
      "source_content": "import CodeBlock from '@theme/CodeBlock';",
      "source_content_hash": "5b37153db9e6631ab87a465a33eb4ac1f3ad15434f6cdd7540c21fdcbac00ddf",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_97fcba86"
      }
    },
    {
      "segment_id": "e4d8f08b",
      "source_content": "<CodeBlock className=\"language-json\">\n  {JSON.stringify(require(\"@site/static/manifest.json\"),null,2)}\n</CodeBlock>",
      "source_content_hash": "9fffedb4b9a20c38f3b39607929f1de40be77d64d7087ac0fcaf6c8793a1df0e",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e4d8f08b"
      }
    },
    {
      "segment_id": "f4c0cbe5",
      "source_content": "## Customizing reload popup {#customizing-reload-popup}",
      "source_content_hash": "68331cab505987b0b9242982c28041c875fc1eff5cc2a2d036b563e48cc84946",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 自定义重新加载弹窗 {#customizing-reload-popup}"
      }
    },
    {
      "segment_id": "858b0a05",
      "source_content": "The `@theme/PwaReloadPopup` component is rendered when a new service worker is waiting to be installed, and we suggest a reload to the user. You can [swizzle](../../swizzling.mdx) this component and implement your own UI. It will receive an `onReload` callback as props, which should be called when the `reload` button is clicked. This will tell the service worker to install the waiting service worker and reload the page.",
      "source_content_hash": "c2215104d976416c398271479a697107ea012ee0f9bc1ea013fb0b8c9340a97b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "当有新服务工作者等待安装时，会渲染 `@theme/PwaReloadPopup` 组件，并向用户建议重新加载。您可以[置换](../../swizzling.mdx)该组件并实现自己的用户界面。该组件会接收一个 `onReload` 回调作为属性，应在点击\"刷新\"按钮时调用此回调。这将通知服务工作者安装等待中的服务工作者并重新加载页面。"
      }
    },
    {
      "segment_id": "c95293b9",
      "source_content": "The default theme includes an implementation for the reload popup and uses [Infima Alerts](https://infima.dev/docs/components/alert).",
      "source_content_hash": "ade0e1b13d6f512f510cc8ad840d915f4baaec03720d622a2bc41eb532999396",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "默认主题包含重新加载弹窗的实现，并使用 [Infima 警告框](https://infima.dev/docs/components/alert)。"
      }
    },
    {
      "segment_id": "7ed923ee",
      "source_content": "![A screen recording of the reload process. An alert box shows in the bottom right of the window, saying \"New content available\". After clicking the \"Refresh\" button, the page's main heading changes from \"Introduction\" to \"PWA :))\".](/img/pwa_reload.gif)",
      "source_content_hash": "575438641c836c24776c8b624e168dddcee9b18a28469dcb5b3940713e30e4bc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![重新加载过程的屏幕录制。窗口右下角显示一个警告框，提示\"有新内容可用\"。点击\"刷新\"按钮后，页面主标题从\"简介\"变为\"PWA :))\"。](/img/pwa_reload.gif)"
      }
    },
    {
      "segment_id": "a5a28988",
      "source_content": "Your component can render `null`, but this is not recommended: users won't have a way to get up-to-date content.",
      "source_content_hash": "b6d22deb0e0e32614c246f816438d29973ab77b5bd32c4f368b852be38862d7f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "您的组件可以渲染 `null`，但不建议这样做：用户将无法获取最新内容。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-2.x/api/plugins/plugin-pwa.mdx",
  "last_updated_timestamp": "2025-06-03T17:28:35.662483+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "a2dbecbd7a72f6ddb2401b08ae3700157fcda809552b2e56acef42f869d42465"
  }
}