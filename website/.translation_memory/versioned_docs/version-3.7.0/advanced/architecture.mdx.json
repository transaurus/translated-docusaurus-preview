{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-3.7.0/advanced/architecture.mdx",
  "source_file_content_hash": "4c8b7516c152034093e55342530347a9683a255a72bb8fb16af5c9eb60dc40a7",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ndescription: How Docusaurus works to build your app\n---",
      "source_content_hash": "526b0b60f04f9d7a18762393782d828ac7f31d93a7ed6b9fc0970e640e8e0b92",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "f85bbfb4",
      "source_content": "# Architecture",
      "source_content_hash": "a38f7bc6aff8e64968ac404465c1579222a2e0b6388f37e9bb31b8fe5f7829a0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "# 架构"
      }
    },
    {
      "segment_id": "10c4cb47",
      "source_content": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport Zoom from 'react-medium-image-zoom';",
      "source_content_hash": "0efcdeed82a8b0b2d4609f31e51b860b86ce61fd7d7fc75ee9d53248dfe0d980",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_10c4cb47"
      }
    },
    {
      "segment_id": "88aa2da8",
      "source_content": "<Zoom>\n\n![Architecture overview](/img/architecture.png)\n\n</Zoom>",
      "source_content_hash": "bed04349fd2c95b0f084314ae3eb6d66c0502b5695d40b387fa658577c619f10",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_88aa2da8"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "This diagram shows how Docusaurus works to build your app. Plugins each collect their content and emit JSON data; themes provide layout components which receive the JSON data as route modules. The bundler bundles all the components and emits a server bundle and a client bundle.",
      "source_content_hash": "f0b9c55d24e52d8a7bf14f42c0074915f2e1ace452cafbfccc19e6e3f37ea82d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "该图表展示了Docusaurus构建应用的运作机制。各插件分别收集其内容并生成JSON数据；主题则提供接收JSON数据作为路由模块的布局组件。打包工具将所有组件打包后生成服务端包和客户端包。"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "Although you (either plugin authors or site creators) are writing JavaScript all the time, bear in mind that the JS is actually run in different environments:",
      "source_content_hash": "61eca252a2ac32263db8461fc5dcf8ef98c8229444ab8c48dd87587a7183626d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "尽管您（无论是插件开发者还是站点创建者）始终在编写JavaScript代码，但请注意这些代码实际运行于不同环境："
      }
    },
    {
      "segment_id": "0787cf7f",
      "source_content": "- All plugin lifecycle methods are run in Node. Therefore, until we support ES Modules in our codebase, plugin source code must be provided as ES modules that can be imported, or CommonJS that can be `require`'d.\n- The theme code is built with Webpack. They can be provided as ESM—following React conventions.",
      "source_content_hash": "c004f72075fa0a431ebd41eac925abc94552e0c594668f12fddf5239547c394d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 所有插件生命周期方法均在Node环境中运行。因此，在代码库支持ES模块之前，插件源代码必须以可被导入的ES模块或可被`require`的CommonJS形式提供。\n- 主题代码通过Webpack构建。可遵循React约定以ESM形式提供。"
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "Plugin code and theme code never directly import each other: they only communicate through protocols (in our case, through JSON temp files and calls to `addRoute`). A useful mental model is to imagine that the plugins are not written in JavaScript, but in another language like Rust. The only way to interact with plugins for the user is through `docusaurus.config.js`, which itself is run in Node (hence you can use `require` and pass callbacks as plugin options).",
      "source_content_hash": "7d4d7e5a16f2589d43e2252acabb3b982b6411753119a5c6f58d511478ca6f9d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "插件代码与主题代码从不直接相互导入：它们仅通过协议通信（在本例中通过JSON临时文件和`addRoute`调用）。一个有效的思维模型是将插件视为用Rust等其他语言编写。用户与插件交互的唯一途径是通过`docusaurus.config.js`配置文件，该文件本身在Node环境中运行（因此可使用`require`并传递回调函数作为插件选项）。"
      }
    },
    {
      "segment_id": "ccc88b4c",
      "source_content": "During bundling, the config file itself is serialized and bundled, allowing the theme to access config options like `themeConfig` or `baseUrl` through [`useDocusaurusContext()`](../docusaurus-core.mdx#useDocusaurusContext). However, the `siteConfig` object only contains **serializable values** (values that are preserved after `JSON.stringify()`). Functions, regexes, etc. would be lost on the client side. The `themeConfig` is designed to be entirely serializable.",
      "source_content_hash": "9f4a9c27147fd54194233533c5dcfefa0f3f65541c358a78db80655580e92ff3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "打包过程中，配置文件会被序列化并打包，使得主题能通过[`useDocusaurusContext()`](../docusaurus-core.mdx#useDocusaurusContext)访问`themeConfig`或`baseUrl`等配置选项。但`siteConfig`对象仅包含**可序列化值**（即经`JSON.stringify()`处理后保留的值）。函数、正则表达式等类型数据将在客户端丢失。`themeConfig`被设计为完全可序列化。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-3.7.0/advanced/architecture.mdx",
  "last_updated_timestamp": "2025-06-03T17:28:36.015709+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "4c8b7516c152034093e55342530347a9683a255a72bb8fb16af5c9eb60dc40a7"
  }
}