{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-3.7.0/advanced/routing.mdx",
  "source_file_content_hash": "3f7df3f2c686d6bc634cd9be31fcea9c3a6b9ade917b11c87f500f2897dc07f5",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ndescription: \"Docusaurus' routing system follows single-page application conventions: one route, one component.\"\n---",
      "source_content_hash": "6eeee84c8ce003690ce3f4355116cdc0efeeed4f760b67992dcfe1e2e0f4d339",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "f85bbfb4",
      "source_content": "# Routing",
      "source_content_hash": "41b390b3f98cfec1f1e9e9cdc4b0b464a737ce3f4af293fe47b8120c197d0bae",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "# 路由系统"
      }
    },
    {
      "segment_id": "10c4cb47",
      "source_content": "import Link from '@docusaurus/Link';\nimport {useLatestVersion, useActiveDocContext} from '@docusaurus/plugin-content-docs/client';\nimport {useLocation} from '@docusaurus/router';\nimport BrowserWindow from '@site/src/components/BrowserWindow';",
      "source_content_hash": "5a5ac02f7501d82039a623b22fc845d0f9456874eff7198c35e28551000364ec",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_10c4cb47"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "Docusaurus' routing system follows single-page application conventions: one route, one component. In this section, we will begin by talking about routing within the three content plugins (docs, blog, and pages), and then go beyond to talk about the underlying routing system.",
      "source_content_hash": "f8a744992eaa18a04ae4012ffd3c6fb372742792d070318fe7d0fff85249cb85",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Docusaurus的路由系统遵循单页应用规范：一个路由对应一个组件。本节将首先介绍三大内容插件（文档、博客和页面）内部的路由机制，进而深入探讨底层路由系统的工作原理。"
      }
    },
    {
      "segment_id": "70153c6e",
      "source_content": "## Routing in content plugins {#routing-in-content-plugins}",
      "source_content_hash": "3dd8eb00519d7554c68f4dca5f4e0da710d62da485cee6c7194d8dc511f71bd6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 内容插件中的路由 {#routing-in-content-plugins}"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "Every content plugin provides a `routeBasePath` option. It defines where the plugins append their routes to. By default, the docs plugin puts its routes under `/docs`; the blog plugin, `/blog`; and the pages plugin, `/`. You can think about the route structure like this:",
      "source_content_hash": "a5101f4b0bd741d2095c1eb6a8e8bc6be7276af3076fbf631ca471c8468a818e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "每个内容插件都提供`routeBasePath`配置项，用于定义插件路由的挂载路径。默认情况下，文档插件将路由挂载在`/docs`下，博客插件挂载在`/blog`下，页面插件则直接挂载在根路径`/`下。其路由结构可理解为："
      }
    },
    {
      "segment_id": "6e5ba8fb",
      "source_content": "```mermaid\ngraph LR;\n    A([\"https://example.com/\"])\n    B([\"/base-url/\"])\n    C([\"/docs/\"])\n    D([\"/blog/\"])\n    E([\"/\"])\n    F[\"All docs <br/>routes\"]\n    G[\"All blog <br/>routes\"]\n    H[\"All pages <br/>routes\"]\n    A---B;\n    B---C;\n    B---D;\n    B---E;\n    C---F;\n    D---G;\n    E---H;\n```",
      "source_content_hash": "4ff66cfa9bc5f23537e0f7a0b4773c5158a35e2903364e4a98b93eb0d978f8c9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_6e5ba8fb"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "Any route will be matched against this nested route config until a good match is found. For example, when given a route `/docs/configuration`, Docusaurus first enters the `/docs` branch, and then searches among the subroutes created by the docs plugin.",
      "source_content_hash": "bb9652c041a290e5c818d0ec87e4e95f60adb778ca16ab2f12f1d36ad3515ffe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "系统会逐级匹配路由配置直至找到对应项。例如当访问`/docs/configuration`时，Docusaurus会先进入`/docs`分支，然后在文档插件创建的子路由中进行搜索。"
      }
    },
    {
      "segment_id": "c3a738de",
      "source_content": "Changing `routeBasePath` can effectively alter your site's route structure. For example, in [Docs-only mode](../guides/docs/docs-introduction.mdx#docs-only-mode), we mentioned that configuring `routeBasePath: '/'` for docs means that all routes that the docs plugin create would not have the `/docs` prefix, yet it doesn't prevent you from having more subroutes like `/blog` created by other plugins.",
      "source_content_hash": "da377ce21819d42e76d5861894be92d0e7984b0883d0b618e4ebb4b6176330c7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "修改`routeBasePath`可重构站点路由体系。如在[纯文档模式](../guides/docs/docs-introduction.mdx#docs-only-mode)中，将文档插件的`routeBasePath`设为`'/'`意味着所有文档路由将去除`/docs`前缀，同时仍允许其他插件创建如`/blog`的子路由。"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "Next, let's look at how the three plugins structure their own \"boxes of subroutes\".",
      "source_content_hash": "a40439f3338d9b243dde99ac3c6c84dbef6eb1f64cf43cdb58f35fa93ad79b9e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "接下来我们具体分析三大插件的子路由结构。"
      }
    },
    {
      "segment_id": "06c0f776",
      "source_content": "### Pages routing {#pages-routing}",
      "source_content_hash": "c57cce2fea74d693517ac293a4fded43d53a62d2b0325813c050054d760e5b06",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 页面路由 {#pages-routing}"
      }
    },
    {
      "segment_id": "aa1e7006",
      "source_content": "Pages routing are straightforward: the file paths directly map to URLs, without any other way to customize. See the [pages docs](../guides/creating-pages.mdx#routing) for more information.",
      "source_content_hash": "4057ea6f7f9cf262ca93f82df636eace41fff336b606b6b810891d2be3738352",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "页面路由采用直接映射机制：文件路径即URL路径，不支持其他定制方式。详见[页面文档](../guides/creating-pages.mdx#routing)。"
      }
    },
    {
      "segment_id": "13d9cd70",
      "source_content": "The component used for Markdown pages is `@theme/MDXPage`. React pages are directly used as the route's component.",
      "source_content_hash": "7da19d495c6ed4c1bef0df1dcc3ef69a783a39bd18f226d3a7382b4dbba73595",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Markdown页面使用`@theme/MDXPage`组件，React页面则直接作为路由组件使用。"
      }
    },
    {
      "segment_id": "6f930b2f",
      "source_content": "### Blog routing {#blog-routing}",
      "source_content_hash": "36e9c77a162a4da475e470e11ac78c41594c95f04f6392df53db44f4800f83d4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 博客路由 {#blog-routing}"
      }
    },
    {
      "segment_id": "c504c207",
      "source_content": "The blog creates the following routes:",
      "source_content_hash": "b905d956a8a9e7fa3447d3b3559fc817aadd695c4cc56292684ba7a1377f220e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "博客插件创建以下路由类型："
      }
    },
    {
      "segment_id": "310e47b7",
      "source_content": "- **Posts list pages**: `/`, `/page/2`, `/page/3`...\n  - The route is customizable through the `pageBasePath` option.\n  - The component is `@theme/BlogListPage`.\n- **Post pages**: `/2021/11/21/algolia-docsearch-migration`, `/2021/05/12/announcing-docusaurus-two-beta`...\n  - Generated from each Markdown post.\n  - The routes are fully customizable through the `slug` front matter.\n  - The component is `@theme/BlogPostPage`.\n- **Tags list page**: `/tags`\n  - The route is customizable through the `tagsBasePath` option.\n  - The component is `@theme/BlogTagsListPage`.\n- **Tag pages**: `/tags/adoption`, `/tags/beta`...\n  - Generated through the tags defined in each post's front matter.\n  - The routes always have base defined in `tagsBasePath`, but the subroutes are customizable through the tag's `permalink` field.\n  - The component is `@theme/BlogTagsPostsPage`.\n- **Archive page**: `/archive`\n  - The route is customizable through the `archiveBasePath` option.\n  - The component is `@theme/BlogArchivePage`.",
      "source_content_hash": "324b79bc7fee0a615b44402cf2c0019d72afaea69cac7ec8ce021c826194c2b3",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- **文章列表页**：`/`, `/page/2`, `/page/3`...\n  - 可通过`pageBasePath`选项自定义路由\n  - 使用`@theme/BlogListPage`组件\n- **文章页**：`/2021/11/21/algolia-docsearch-migration`, `/2021/05/12/announcing-docusaurus-two-beta`...\n  - 由每篇Markdown文章生成\n  - 通过`slug`前置元数据完全自定义路由\n  - 使用`@theme/BlogPostPage`组件\n- **标签列表页**：`/tags`\n  - 可通过`tagsBasePath`选项自定义路由\n  - 使用`@theme/BlogTagsListPage`组件\n- **标签页**：`/tags/adoption`, `/tags/beta`...\n  - 根据文章前置元数据中的标签生成\n  - 基础路径由`tagsBasePath`定义，子路径可通过标签的`permalink`字段定制\n  - 使用`@theme/BlogTagsPostsPage`组件\n- **归档页**：`/archive`\n  - 可通过`archiveBasePath`选项自定义路由\n  - 使用`@theme/BlogArchivePage`组件"
      }
    },
    {
      "segment_id": "52388877",
      "source_content": "### Docs routing {#docs-routing}",
      "source_content_hash": "dd3f3826f538449bb58546ce7129ba15aace5ed8c3c83691e032385c394b1838",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 文档路由 {#docs-routing}"
      }
    },
    {
      "segment_id": "eab056be",
      "source_content": "The docs is the only plugin that creates **nested routes**. At the top, it registers [**version paths**](../guides/docs/versioning.mdx): `/`, `/next`, `/2.0.0-beta.13`... which provide the version context, including the layout and sidebar. This ensures that when switching between individual docs, the sidebar's state is preserved, and that you can switch between versions through the navbar dropdown while staying on the same doc. The component used is `@theme/DocPage`.",
      "source_content_hash": "f815cdb462195364675abf2bdd5e4e1db8bc0a83fed11c63f3aa5ea08f257131",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "文档插件是唯一支持**嵌套路由**的插件。顶层注册的[版本路径](../guides/docs/versioning.mdx)：`/`, `/next`, `/2.0.0-beta.13`...提供了版本上下文（包括布局和侧边栏），确保切换文档时侧边栏状态得以保留，且可通过导航栏下拉菜单切换版本而不改变当前文档。该功能使用`@theme/DocPage`组件实现。"
      }
    },
    {
      "segment_id": "edd975d4",
      "source_content": "export const URLPath = () => <code>{useLocation().pathname}</code>;",
      "source_content_hash": "2ef9194be222917a034634f4844147d21b80e3099f3eca7b435ecd56b97d98be",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_edd975d4"
      }
    },
    {
      "segment_id": "fd0d6dc5",
      "source_content": "export const FilePath = () => {\n  const currentVersion = useActiveDocContext('default').activeVersion.name;\n  return <code>{currentVersion === 'current' ? './docs/' : `./versioned_docs/version-${currentVersion}/`}advanced/routing.md</code>;\n}",
      "source_content_hash": "963cec1b54f3855d0822f405706c8c6bd55f8a43f2dd669b53bf76d997a13055",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_fd0d6dc5"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "The individual docs are rendered in the remaining space after the navbar, footer, sidebar, etc. have all been provided by the `DocPage` component. For example, this page, <URLPath />, is generated from the file at <FilePath />. The component used is `@theme/DocItem`.",
      "source_content_hash": "ca408b68490615b758957c7cba520f60a8d5240426c92518430af445b6db01da",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "单个文档会在导航栏、页脚、侧边栏等由`DocPage`组件提供的布局元素之外的剩余空间内渲染。例如当前页面<URLPath />是由文件<FilePath />生成的，使用的组件是`@theme/DocItem`。"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "The doc's `slug` front matter customizes the last part of the route, but the base route is always defined by the plugin's `routeBasePath` and the version's `path`.",
      "source_content_hash": "a55de8c36b53e94917fcfc50db8ee8af0eea15f20ee874690e662447ba2096c8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "文档的`slug`前置元数据可自定义路由的最后部分，但基础路由始终由插件的`routeBasePath`和版本的`path`决定。"
      }
    },
    {
      "segment_id": "1c598ecd",
      "source_content": "### File paths and URL paths {#file-paths-and-url-paths}",
      "source_content_hash": "b628908c1adc7e44bde3320a92bf66ee49c292177230b9e92aeca832235228e1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 文件路径与URL路径 {#file-paths-and-url-paths}"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "Throughout the documentation, we always try to be unambiguous about whether we are talking about file paths or URL paths. Content plugins usually map file paths directly to URL paths, for example, `./docs/advanced/routing.md` will become `/docs/advanced/routing`. However, with `slug`, you can make URLs totally decoupled from the file structure.",
      "source_content_hash": "80adc446da2435335629008616f793747c1ee6f07d483136eb410bf1ad0c2f30",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在文档中我们会明确区分文件路径和URL路径。内容插件通常将文件路径直接映射为URL路径，例如`./docs/advanced/routing.md`会转换为`/docs/advanced/routing`。但通过`slug`配置可以使URL与文件结构完全解耦。"
      }
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "When writing links in Markdown, you could either mean a _file path_, or a _URL path_, which Docusaurus would use several heuristics to determine.",
      "source_content_hash": "b25aaa7bd745ea7633e9735d8bc977c2a5e3431893657d76c0b6ee82a09f0d34",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在Markdown中编写链接时，Docusaurus会通过以下启发式规则判断是文件路径还是URL路径："
      }
    },
    {
      "segment_id": "2fc7ec55",
      "source_content": "- If the path has a `@site` prefix, it is _always_ an asset file path.\n- If the path has an `http(s)://` prefix, it is _always_ a URL path.\n- If the path doesn't have an extension, it is a URL path. For example, a link `[page](../plugins)` on a page with URL `/docs/advanced/routing` will link to `/docs/plugins`. Docusaurus will only detect broken links when building your site (when it knows the full route structure), but will make no assumptions about the existence of a file. It is exactly equivalent to writing `<a href=\"../plugins\">page</a>` in a JSX file.\n- If the path has an `.md(x)` extension, Docusaurus would try to resolve that Markdown file to a URL, and replace the file path with a URL path.\n- If the path has any other extension, Docusaurus would treat it as [an asset](../guides/markdown-features/markdown-features-assets.mdx) and bundle it.",
      "source_content_hash": "752d68ce2ede5033d95056fdafe7687059da225d6528f1fafd54225641facd97",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 带`@site`前缀的路径始终视为资源文件路径\n- 带`http(s)://`前缀的路径始终视为URL路径\n- 无扩展名的路径视为URL路径。例如在`/docs/advanced/routing`页面的链接`[page](../plugins)`会指向`/docs/plugins`。构建时会检测断裂链接，但不会对文件存在性做假设，等效于在JSX中写`<a href=\"../plugins\">page</a>`\n- 带`.md(x)`扩展名的路径会尝试解析为对应Markdown文件的URL路径\n- 其他扩展名的路径视为[静态资源](../guides/markdown-features/markdown-features-assets.mdx)并进行打包"
      }
    },
    {
      "segment_id": "eb51d107",
      "source_content": "The following directory structure may help you visualize this file → URL mapping. Assume that there's no slug customization in any page.",
      "source_content_hash": "24fcdb06be714985aef5559fc39f3b4c1f3821a957e0d62dcab316ba496d72a0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下目录结构可帮助理解文件到URL的映射关系（假设所有页面均未使用slug自定义）："
      }
    },
    {
      "segment_id": "45444c80",
      "source_content": "<details>\n\n<summary>A sample site structure</summary>\n\n```bash\n.\n├── blog                            # blog plugin has routeBasePath: '/blog'\n│   ├── 2019-05-28-first-blog-post.md       # -> /blog/2019/05/28/first-blog-post\n│   ├── 2019-05-29-long-blog-post.md        # -> /blog/2019/05/29/long-blog-post\n│   ├── 2021-08-01-mdx-blog-post.mdx        # -> /blog/2021/08/01/mdx-blog-post\n│   └── 2021-08-26-welcome\n│       ├── docusaurus-plushie-banner.jpeg\n│       └── index.md                        # -> /blog/2021/08/26/welcome\n├── docs                            # docs plugin has routeBasePath: '/docs'; current version has base path '/'\n│   ├── intro.md                            # -> /docs/intro\n│   ├── tutorial-basics\n│   │   ├── _category_.json\n│   │   ├── congratulations.md              # -> /docs/tutorial-basics/congratulations\n│   │   └── markdown-features.mdx           # -> /docs/tutorial-basics/markdown-features\n│   └── tutorial-extras\n│       ├── _category_.json\n│       ├── manage-docs-versions.md         # -> /docs/tutorial-extras/manage-docs-versions\n│       └── translate-your-site.md          # -> /docs/tutorial-extras/translate-your-site\n├── src\n│   └── pages                       # pages plugin has routeBasePath: '/'\n│       ├── index.module.css\n│       ├── index.tsx                       # -> /\n│       └── markdown-page.md                # -> /markdown-page\n└── versioned_docs\n    └── version-1.0.0               # version has base path '/1.0.0'\n        ├── intro.md                        # -> /docs/1.0.0/intro\n        ├── tutorial-basics\n        │   ├── _category_.json\n        │   ├── congratulations.md          # -> /docs/1.0.0/tutorial-basics/congratulations\n        │   └── markdown-features.mdx       # -> /docs/1.0.0/tutorial-basics/markdown-features\n        └── tutorial-extras\n            ├── _category_.json\n            ├── manage-docs-versions.md     # -> /docs/1.0.0/tutorial-extras/manage-docs-versions\n            └── translate-your-site.md      # -> /docs/1.0.0/tutorial-extras/translate-your-site\n```\n\n</details>",
      "source_content_hash": "15c1ad4425de0315c2fb68db6c9db4d5e0e1e92da3e0cd1e6834e8a906091ddf",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_45444c80"
      }
    },
    {
      "segment_id": "8664ed0b",
      "source_content": "So much about content plugins. Let's take one step back and talk about how routing works in a Docusaurus app in general.",
      "source_content_hash": "ec0893916e37d474de7f89ec913edfd501d547bef91f39ba0e65fe00af6540e8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "关于内容插件的路由就介绍到这里。现在让我们退后一步，看看Docusaurus应用的整体路由机制。"
      }
    },
    {
      "segment_id": "af843cee",
      "source_content": "## Routes become HTML files {#routes-become-html-files}",
      "source_content_hash": "bc483ab04c5fbbfb8fdf58bdd4e3fe2840e17f1d42540570665f649db556b475",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 路由生成HTML文件 {#routes-become-html-files}"
      }
    },
    {
      "segment_id": "681ef526",
      "source_content": "Because Docusaurus is a server-side rendering framework, all routes generated will be server-side rendered into static HTML files. If you are familiar with the behavior of HTTP servers like [Apache2](https://httpd.apache.org/docs/trunk/getting-started.html), you will understand how this is done: when the browser sends a request to the route `/docs/advanced/routing`, the server interprets that as request for the HTML file `/docs/advanced/routing/index.html`, and returns that.",
      "source_content_hash": "c072376433bc54d7c57ff847941453e432bd509fdd541d68dd0b2f94af19acee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "由于Docusaurus是服务端渲染框架，所有生成的路由都会被服务端渲染为静态HTML文件。熟悉[Apache2](https://httpd.apache.org/docs/trunk/getting-started.html)等HTTP服务器行为的话会理解其原理：当浏览器请求`/docs/advanced/routing`路由时，服务器会将其解析为对HTML文件`/docs/advanced/routing/index.html`的请求并返回。"
      }
    },
    {
      "segment_id": "be17ccc3",
      "source_content": "The `/docs/advanced/routing` route can correspond to either `/docs/advanced/routing/index.html` or `/docs/advanced/routing.html`. Some hosting providers differentiate between them using the presence of a trailing slash, and may or may not tolerate the other. Read more in the [trailing slash guide](https://github.com/slorber/trailing-slash-guide).",
      "source_content_hash": "3ee9c1aceca6b185bfae14ee24dba332fec66b64e70de2f73e37aecd03c607ad",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`/docs/advanced/routing`路由可能对应`/docs/advanced/routing/index.html`或`/docs/advanced/routing.html`。部分托管服务商通过尾部斜杠区分这两种形式，兼容性各有不同，详见[尾部斜杠指南](https://github.com/slorber/trailing-slash-guide)。"
      }
    },
    {
      "segment_id": "ad3e22c6",
      "source_content": "For example, the build output of the directory above is (ignoring other assets and JS bundle):",
      "source_content_hash": "de8e89d408747a3ade5f94ee6ec43b4614f2293fe6c5a06f9b75e4637d41f715",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "例如上述目录结构的构建输出如下（忽略其他资源和JS打包文件）："
      }
    },
    {
      "segment_id": "3b4cfaf8",
      "source_content": "<details>\n\n<summary>Output of the above workspace</summary>\n\n```bash\nbuild\n├── 404.html                      # /404/\n├── blog\n│   ├── archive\n│   │   └── index.html            # /blog/archive/\n│   ├── first-blog-post\n│   │   └── index.html            # /blog/first-blog-post/\n│   ├── index.html                # /blog/\n│   ├── long-blog-post\n│   │   └── index.html            # /blog/long-blog-post/\n│   ├── mdx-blog-post\n│   │   └── index.html            # /blog/mdx-blog-post/\n│   ├── tags\n│   │   ├── docusaurus\n│   │   │   └── index.html        # /blog/tags/docusaurus/\n│   │   ├── hola\n│   │   │   └── index.html        # /blog/tags/hola/\n│   │   └── index.html            # /blog/tags/\n│   └── welcome\n│       └── index.html            # /blog/welcome/\n├── docs\n│   ├── 1.0.0\n│   │   ├── intro\n│   │   │   └── index.html        # /docs/1.0.0/intro/\n│   │   ├── tutorial-basics\n│   │   │   ├── congratulations\n│   │   │   │   └── index.html    # /docs/1.0.0/tutorial-basics/congratulations/\n│   │   │   └── markdown-features\n│   │   │       └── index.html    # /docs/1.0.0/tutorial-basics/markdown-features/\n│   │   └── tutorial-extras\n│   │       ├── manage-docs-versions\n│   │       │   └── index.html    # /docs/1.0.0/tutorial-extras/manage-docs-versions/\n│   │       └── translate-your-site\n│   │           └── index.html    # /docs/1.0.0/tutorial-extras/translate-your-site/\n│   ├── intro\n│   │   └── index.html            # /docs/1.0.0/intro/\n│   ├── tutorial-basics\n│   │   ├── congratulations\n│   │   │   └── index.html        # /docs/tutorial-basics/congratulations/\n│   │   └── markdown-features\n│   │       └── index.html        # /docs/tutorial-basics/markdown-features/\n│   └── tutorial-extras\n│       ├── manage-docs-versions\n│       │   └── index.html        # /docs/tutorial-extras/manage-docs-versions/\n│       └── translate-your-site\n│           └── index.html        # /docs/tutorial-extras/translate-your-site/\n├── index.html                    # /\n└── markdown-page\n    └── index.html                # /markdown-page/\n```\n\n</details>",
      "source_content_hash": "68a6cddba4abdffac2f077933168fbda5c4184d6d82fd56e020ee6defaae1c8d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_3b4cfaf8"
      }
    },
    {
      "segment_id": "eeeea5ce",
      "source_content": "If `trailingSlash` is set to `false`, the build would emit `intro.html` instead of `intro/index.html`.",
      "source_content_hash": "7ff44806b3439c937608e3382ea45410cff02f0ddd2dfc7af213f8148910374e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若`trailingSlash`设为`false`，构建时将生成`intro.html`而非`intro/index.html`。"
      }
    },
    {
      "segment_id": "e4d8cd8a",
      "source_content": "All HTML files will reference its JS assets using absolute URLs, so in order for the correct assets to be located, you have to configure the `baseUrl` field. Note that `baseUrl` doesn't affect the emitted bundle's file structure: the base URL is one level above the Docusaurus routing system. You can see the aggregate of `url` and `baseUrl` as the actual location of your Docusaurus site.",
      "source_content_hash": "890a5b6a55972962c8c7993978b49e6bcf7525baeb695884c45f544f8ba78bb1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "所有HTML文件都使用绝对URL引用JS资源，因此必须配置`baseUrl`字段确保资源正确定位。注意`baseUrl`不会影响打包输出的文件结构：基础URL位于Docusaurus路由系统之上，可将`url`和`baseUrl`的组合视为站点实际部署位置。"
      }
    },
    {
      "segment_id": "af834e0d",
      "source_content": "For example, the emitted HTML would contain links like `<link rel=\"preload\" href=\"/assets/js/runtime~main.7ed5108a.js\" as=\"script\">`. Because absolute URLs are resolved from the host, if the bundle placed under the path `https://example.com/base/`, the link will point to `https://example.com/assets/js/runtime~main.7ed5108a.js`, which is, well, non-existent. By specifying `/base/` as base URL, the link will correctly point to `/base/assets/js/runtime~main.7ed5108a.js`.",
      "source_content_hash": "2f151f84b852a4fa26d4b11c37a3bf3a586beff42e5712a94ed377634bbbc36c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "例如，生成的HTML文件会包含类似`<link rel=\"preload\" href=\"/assets/js/runtime~main.7ed5108a.js\" as=\"script\">`的链接。由于绝对URL是从主机地址解析的，如果资源包部署在`https://example.com/base/`路径下，该链接将错误指向`https://example.com/assets/js/runtime~main.7ed5108a.js`（实际不存在）。通过指定`/base/`作为基础URL，链接才能正确指向`/base/assets/js/runtime~main.7ed5108a.js`。"
      }
    },
    {
      "segment_id": "d75361e3",
      "source_content": "Localized sites have the locale as part of the base URL as well. For example, `https://docusaurus.io/zh-CN/docs/advanced/routing/` has base URL `/zh-CN/`.",
      "source_content_hash": "6c756f02ebef3904b7d99b74a6ba8a85c68e03647cac8a7e77ffae6577fa84da",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本地化站点的基本URL会包含语言代码。例如`https://docusaurus.io/zh-CN/docs/advanced/routing/`的基础URL是`/zh-CN/`。"
      }
    },
    {
      "segment_id": "3e795db3",
      "source_content": "## Generating and accessing routes {#generating-and-accessing-routes}",
      "source_content_hash": "2c998a29e497f6fa040833c3f21a40ca0bc7de5f3f1fe31cccb4f7f1dc22ee20",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 路由的生成与访问 {#generating-and-accessing-routes}"
      }
    },
    {
      "segment_id": "5eedf0a1",
      "source_content": "The `addRoute` lifecycle action is used to generate routes. It registers a piece of route config to the route tree, giving a route, a component, and props that the component needs. The props and the component are both provided as paths for the bundler to `require`, because as explained in the [architecture overview](architecture.mdx), server and client only communicate through temp files.",
      "source_content_hash": "e351d84ee8199a0b8d988975fece7924c329a3ef9b1104220d6d6d2361b40851",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`addRoute`生命周期操作用于生成路由。它将路由配置注册到路由树中，提供路由路径、组件及组件所需的props。props和组件都以路径形式提供给打包器进行`require`调用，正如[架构概述](architecture.mdx)所述，服务端与客户端仅通过临时文件通信。"
      }
    },
    {
      "segment_id": "e4945edb",
      "source_content": "All routes are aggregated in `.docusaurus/routes.js`, which you can view with the debug plugin's [routes panel](/__docusaurus/debug/routes).",
      "source_content_hash": "07a4c825013b46e392ba7c1a3c9344e231143c00d1488850f6001c335f2a78c7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "所有路由都聚合在`.docusaurus/routes.js`中，可通过调试插件的[路由面板](/__docusaurus/debug/routes)查看。"
      }
    },
    {
      "segment_id": "9ede513a",
      "source_content": "On the client side, we offer `@docusaurus/router` to access the page's route. `@docusaurus/router` is a re-export of the [`react-router-dom`](https://www.npmjs.com/package/react-router-dom/v/5.3.0) package. For example, you can use `useLocation` to get the current page's [location](https://developer.mozilla.org/en-US/docs/Web/API/Location), and `useHistory` to access the [history object](https://developer.mozilla.org/en-US/docs/Web/API/History). (They are not the same as the browser API, although similar in functionality. Refer to the React Router documentation for specific APIs.)",
      "source_content_hash": "c24d609914e63312285a454fddf45633403a2fcca09fe77a529cacff464d2b8c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在客户端，我们提供`@docusaurus/router`来访问页面路由。该模块是[`react-router-dom`](https://www.npmjs.com/package/react-router-dom/v/5.3.0)的重新导出。例如可使用`useLocation`获取当前页面的[location对象](https://developer.mozilla.org/en-US/docs/Web/API/Location)，或通过`useHistory`访问[history对象](https://developer.mozilla.org/en-US/docs/Web/API/History)。（注意这些API虽功能相似，但不同于浏览器原生API，具体用法请参考React Router文档。）"
      }
    },
    {
      "segment_id": "49be422b",
      "source_content": "This API is **SSR safe**, as opposed to the browser-only `window.location`.",
      "source_content_hash": "ffee21ca5497500a8b47bd07a3ca70dbc87c5d3957ff47e89b1ada159ed8bd79",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "此API具有**SSR安全性**，与仅限浏览器环境的`window.location`不同。"
      }
    },
    {
      "segment_id": "5ad8d2b2",
      "source_content": "```jsx title=\"myComponent.js\"\nimport React from 'react';\nimport {useLocation} from '@docusaurus/router';\n\nexport function PageRoute() {\n  // React router provides the current component's route, even in SSR\n  const location = useLocation();\n  return (\n    <span>\n      We are currently on <code>{location.pathname}</code>\n    </span>\n  );\n}\n```",
      "source_content_hash": "685cf1244c12f947425f5065d2b6d8316fcaf53a73b2abca1f0b73f98fbcbc34",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "ca18f6b5",
      "source_content": "export function PageRoute() {\n  const location = useLocation();\n  return (\n    <span>\n      We are currently on <code>{location.pathname}</code>\n    </span>\n  );\n}",
      "source_content_hash": "98c5dd87ba096332a86b4a55290ae5000f39a5068b0d81fbea5dbd3e15950642",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "6620d0b9",
      "source_content": "<BrowserWindow>\n\n<PageRoute />\n\n</BrowserWindow>",
      "source_content_hash": "122659a3e09d0e5cfee3358b376675168c973618d8d1d1fd860db5db97b00d5c",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "371cb514",
      "source_content": "## Escaping from SPA redirects {#escaping-from-spa-redirects}",
      "source_content_hash": "6eae276098f13a027f15aedd66a4c9b1427bf57c1110c770e52757706b6bbd4a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 绕过SPA重定向机制 {#escaping-from-spa-redirects}"
      }
    },
    {
      "segment_id": "5d5a3416",
      "source_content": "Docusaurus builds a [single-page application](https://developer.mozilla.org/en-US/docs/Glossary/SPA), where route transitions are done through the `history.push()` method of React router. This operation is done on the client side. However, the prerequisite for a route transition to happen this way is that the target URL is known to our router. Otherwise, the router catches this path and displays a 404 page instead.",
      "source_content_hash": "7a6d2434cec6cf4ff73fc103e90e189de247eaa7824e1cb40e45f3bca6e1d931",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Docusaurus构建的是[单页应用](https://developer.mozilla.org/en-US/docs/Glossary/SPA)，其路由跳转通过React Router的`history.push()`方法实现。这种操作发生在客户端，但前提是目标URL必须被路由器识别，否则该路径会被捕获并显示404页面。"
      }
    },
    {
      "segment_id": "070ff7a2",
      "source_content": "If you put some HTML pages under the `static` folder, they will be copied to the build output and therefore become accessible as part of your website, yet it's not part of the Docusaurus route system. We provide a `pathname://` protocol that allows you to redirect to another part of your domain in a non-SPA fashion, as if this route is an external link.",
      "source_content_hash": "e06d7525113a5b994fe1014757c3ee5289ba657adbffb2d2114b67632337989c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若将HTML文件放入`static`文件夹，它们会被复制到构建输出目录从而成为网站可访问内容，但这些路径不属于Docusaurus路由系统。我们提供`pathname://`协议，允许以非SPA方式重定向到站内其他路径（如同外部链接）。"
      }
    },
    {
      "segment_id": "703442ed",
      "source_content": "```md\n- [pathname:///pure-html](pathname:///pure-html)\n```",
      "source_content_hash": "9a9e680e0f9b43052a7263106e573afcc4a17fd0fb67c167e2ed7edf25cca2bd",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "2c0b4bd8",
      "source_content": "<BrowserWindow>\n\n- [`pathname:///pure-html`](pathname:///pure-html)\n\n</BrowserWindow>",
      "source_content_hash": "064f9bfc2786ef89d529183f45861442e43ab017da865e8e27962eac3128dde3",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "2d5a3f2f",
      "source_content": "The `pathname://` protocol is useful for referencing any content in the static folder. For example, Docusaurus would convert [all Markdown static assets to require() calls](../guides/markdown-features/markdown-features-assets.mdx#static-assets). You can use `pathname://` to keep it a regular link instead of being hashed by Webpack.",
      "source_content_hash": "ec7ae57c461c215b20df614147a6a9f182ece42778e3cdaa18105428349719b0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`pathname://`协议特别适用于引用static文件夹中的内容。例如Docusaurus会[将所有Markdown静态资源转为require()调用](../guides/markdown-features/markdown-features-assets.mdx#static-assets)，而使用该协议可保持原始链接形式，避免被Webpack添加哈希值。"
      }
    },
    {
      "segment_id": "f5128628",
      "source_content": "```md title=\"my-doc.md\"\n![An image from the static](pathname:///img/docusaurus.png)\n\n[An asset from the static](pathname:///files/asset.pdf)\n```",
      "source_content_hash": "7aa9f0aab0ae1ce94a44cf36904e2a61ceb2be1d25f3886eade621b24962f7b1",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "e962484d",
      "source_content": "Docusaurus will only strip the `pathname://` prefix without processing the content.",
      "source_content_hash": "1903f1012906648ff8692b90da4923b0ab22beed57c66d98ef00e37d1c1830d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Docusaurus仅会移除`pathname://`前缀而不处理后续内容。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-3.7.0/advanced/routing.mdx",
  "last_updated_timestamp": "2025-06-03T17:28:36.055799+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "3f7df3f2c686d6bc634cd9be31fcea9c3a6b9ade917b11c87f500f2897dc07f5"
  }
}
